{
	"info": {
		"_postman_id": "6bf9f4a0-9f00-4c52-bdec-a3ceb3154478",
		"name": "HW_2_Ann_Los",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"var respBody = pm.response.json();\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"name_test_4\", function () {\r",
							"pm.expect(respBody.name).to.eql(\"Ann\");\r",
							"});\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"age_test_5\", function () {\r",
							"pm.expect(respBody.age).to.eql('23');\r",
							"});\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"salary_test_6\", function(){\r",
							"pm.expect(respBody.salary).to.eql (63000);\r",
							"});\r",
							"// 7. Спарсить request.\r",
							"var req = request.data;\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test (\"name_req_test_8\", function (){\r",
							"    pm.expect(req.name).to.eql(respBody.name);\r",
							"});\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test (\"age_req_test_9\", function (){\r",
							"    pm.expect(req.age).to.eql(respBody.age);\r",
							"});\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test (\"salary_req_test_10\", function (){\r",
							"    pm.expect(+req.salary).to.eql(respBody.salary);\r",
							"});\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"console.log(respBody.family);\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test (\"u_salary1_5_year_test_12\", function (){\r",
							"    pm.expect (req.salary * 4).to.eql +(respBody.u_salary_1_5_year);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Ann",
							"type": "default"
						},
						{
							"key": "age",
							"value": "23",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "63000",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"var respBody = pm.response.json();\r",
							"// 4. Спарсить request.\r",
							"var req = pm.request.url.query.toObject();\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test (\"name_req_test_5\", function() {\r",
							"pm.expect(respBody.name).to.eql(req.name);\r",
							"});\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test (\"age_req_test_6\", function() {\r",
							"pm.expect(respBody.age).to.eql(req.age);\r",
							"});\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test (\"salary_req_test_7\", function() {\r",
							"pm.expect(respBody.salary).to.eql(+req.salary);\r",
							"});\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(respBody.family);\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"The dog contains the name\", function (){\r",
							"pm.expect(respBody.family.pets.dog).to.have.property(\"name\")\r",
							"});\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"The dog contains the age\", function (){\r",
							"pm.expect(respBody.family.pets.dog).to.have.property(\"age\")\r",
							"});\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"The name is Luky\", function (){\r",
							"pm.expect(respBody.family.pets.dog.name).to.eql(\"Luky\")\r",
							"});\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"The Luky's age is 4\", function (){\r",
							"pm.expect(respBody.family.pets.dog.age).to.eql(4)\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Tanya&age=36&salary=650",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Tanya"
						},
						{
							"key": "age",
							"value": "36"
						},
						{
							"key": "salary",
							"value": "650"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"var respBody =  pm.response.json();\r",
							"// 4. Спарсить request.\r",
							"var req = pm.request.url.query.toObject();\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"name s request\", function (){\r",
							"    pm.expect(respBody.name).to.eql(req.name);\r",
							"});\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"age s request\", function (){\r",
							"    pm.expect(respBody.age).to.eql(+req.age);\r",
							"});\r",
							"// // 7. Вывести в консоль параметр salary из request.\r",
							"console.log(req.salary);\r",
							"// // 8. Вывести в консоль параметр salary из response.\r",
							"console.log(respBody.salary);\r",
							"//  Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(respBody.salary[0]);\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(respBody.salary[1]);\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(respBody.salary[2]);\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"salary from request\", function (){\r",
							"    pm.expect(respBody.salary[0]).to.eql(+req.salary);\r",
							"    });\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Salary*2 from request\", function (){\r",
							"    pm.expect(respBody.salary[1]).to.eql+(req.salary * 2);\r",
							"    });\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Salary*3 from request\", function (){\r",
							"    pm.expect(respBody.salary[2]).to.eql+(req.salary * 3);\r",
							"    });\r",
							"// 15. Создать в окружении переменную name\r",
							"pm.environment.set('name');\r",
							"// 16. Создать в окружении переменную age\r",
							"pm.environment.set('age');\r",
							"// 17. Создать в окружении переменную salary\r",
							"pm.environment.set('salary');\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set('name', respBody.name);\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set('age', respBody.age);\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set('salary', respBody.salary[0]);\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из араметра salary.\r",
							"var salary = respBody.salary; \r",
							"for (var i=0; i < salary.length; i++) {\r",
							"console.log(\"Salary_ \"+ i + ': ', +salary[i])};\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Vadim&age=32&salary=800",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Vadim"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "800"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request +\r",
							"// 2. Вставить параметр age из окружения в age +\r",
							"// 3. Вставить параметр name из окружения в name +\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 6. Спарсить response body в json.\r",
							"var respBody = pm.response.json();\r",
							"// 7. Спарсить request.\r",
							"var req = request.data;\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test (\"res_start_qa_salary\", function() {\r",
							"pm.expect(respBody).to.have.property(\"start_qa_salary\")\r",
							"});\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test (\"res_qa_salary_after_6_months\", function() {\r",
							"pm.expect(respBody).to.have.property(\"qa_salary_after_6_months\")\r",
							"});\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test (\"qa_salary_after_12_months\", function() {\r",
							"pm.expect(respBody).to.have.property(\"qa_salary_after_12_months\")\r",
							"});\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test (\"qa_salary_after_1.5_year\", function() {\r",
							"pm.expect(respBody).to.have.property(\"qa_salary_after_1.5_year\")\r",
							"});\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test (\"qa_salary_after_3.5_years\", function() {\r",
							"pm.expect(respBody).to.have.property(\"qa_salary_after_3.5_years\")\r",
							"});\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test (\"person in response\", function() {\r",
							"pm.expect(respBody).to.have.property(\"person\")\r",
							"});\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"start_qa_salary\", function (){\r",
							"pm.expect(respBody.start_qa_salary).to.eql(+req.salary)\r",
							"});\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months*2\", function (){\r",
							"pm.expect(respBody.qa_salary_after_6_months).to.eql(req.salary*2)\r",
							"});\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months*2.7\", function (){\r",
							"pm.expect(respBody.qa_salary_after_12_months).to.eql(req.salary*2.7)\r",
							"});\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year*3.3\", function (){\r",
							"pm.expect(respBody[\"qa_salary_after_1.5_year\"]).to.eql(req.salary*3.3)\r",
							"});\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5_years\", function (){\r",
							"pm.expect(respBody[\"qa_salary_after_3.5_years\"]).to.eql(req.salary*3.8)\r",
							"});\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"u_name равен salary\", function (){\r",
							"pm.expect(respBody.person.u_name[1]).to.eql(+req.salary)\r",
							"});\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"u_age равен age\", function (){\r",
							"pm.expect(respBody.person.u_age).to.eql(+req.age)\r",
							"});\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"u_salary_5_years\", function (){\r",
							"pm.expect(respBody.u_salary_5_years).to.eql+(req.salary * 4.2)\r",
							"});\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person."
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "default"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}