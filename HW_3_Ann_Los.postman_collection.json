{
	"info": {
		"_postman_id": "88432bfd-d797-41de-9ce1-bb06722bba4b",
		"name": "HW_3_Ann_Los",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1)token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) необходимо залогиниться\r",
							"// POST\r",
							"// http://162.55.220.72:5005/login\r",
							"// login : str (кроме /)\r",
							"// password : str\r",
							"\r",
							"// Приходящий токен необходимо передать во все остальные запросы.\r",
							"var jsonData = pm.response.json();\r",
							"var resp_token = jsonData.token;\r",
							"console.log (resp_token)\r",
							"pm.environment.set(\"token\", resp_token);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "ideser",
							"type": "default"
						},
						{
							"key": "password",
							"value": "jfhfhfcc",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/login",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "2) raw json",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 2) Проверка структуры json в ответе.\r",
							"var shema = {\r",
							"\t\"type\": \"object\",\r",
							"\t\"required\": [\r",
							"\t\t\"person\",\r",
							"\t\t\"qa_salary_after_12_months\",\r",
							"\t\t\"qa_salary_after_6_months\",\r",
							"\t\t\"start_qa_salary\"\r",
							"\t],\r",
							"\t\"properties\": {\r",
							"\t\t\"person\": {\r",
							"\t\t\t\"title\": \"Person\", \r",
							"\t\t\t\"type\": \"object\",\r",
							"\t\t\t\"required\": [\r",
							"\t\t\t\t\"u_age\",\r",
							"\t\t\t\t\"u_name\",\r",
							"\t\t\t\t\"u_salary_1_5_year\"\r",
							"\t\t\t],\r",
							"\t\t\t\"properties\": {\r",
							"\t\t\t\t\"u_age\": {\r",
							"\t\t\t\t\t\"title\": \"U_age\", \r",
							"\t\t\t\t\t\"type\": \"integer\",\r",
							"\t \t\t\t\t\t},\r",
							"\t\t\t\t\"u_name\": {\t\r",
							"\t\t\t\t\t\"title\": \"U_name\", \r",
							"\t\t\t\t\t\"type\": \"array\",\r",
							"\t\t\t\t},\r",
							"\t\t\t\t\"u_salary_1_5_year\": {\t\r",
							"\t\t\t\t\t\"title\": \"U_salary_1_5_year\", \r",
							"\t\t\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\t}\r",
							"\t\t\t}\r",
							"\t\t}\r",
							",\r",
							"\t\t\"qa_salary_after_12_months\": {\r",
							"\t\t\t\"title\": \"Qa_salary_after_12_months\", \r",
							"\t\t\t\"type\": \"integer\",\r",
							"\t\t},\r",
							"\t\t\"qa_salary_after_6_months\": {\r",
							"\t\t\t\"title\": \"Qa_salary_after_6_months\", \r",
							"\t\t\t\"type\": \"integer\",\r",
							"\t\t},\r",
							"\t\t\"start_qa_salary\": {\r",
							"\t\t\t\"title\": \"Start_qa_salary\", \r",
							"\t\t\t\"type\": \"integer\",\r",
							"\t\t}\r",
							"\t}\r",
							"}\r",
							"pm.test('Shema is valid', function(){\r",
							"    pm.response.to.have.jsonSchema(shema)\r",
							"})\r",
							"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"var respBody = pm.response.json();\r",
							"var req = JSON.parse(request.data)\r",
							"pm.test(\"salary * 4\", function () {\r",
							"    pm.expect(respBody.person.u_salary_1_5_year).to.eql(req.salary*4);\r",
							"});\r",
							"pm.test(\"salary * 2.9\", function () {\r",
							"    pm.expect(respBody.qa_salary_after_12_months).to.eql(req.salary * 2.9);\r",
							"});\r",
							"pm.test(\"salary * 2\", function () {\r",
							"    pm.expect(respBody.qa_salary_after_6_months).to.eql(req.salary * 2);\r",
							"});\r",
							"pm.test(\"salary = start_qa_salary\", function () {\r",
							"    pm.expect(respBody.start_qa_salary).to.eql(req.salary);\r",
							"});\r",
							"// 4) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\r",
							"var salary = respBody.person.u_salary_1_5_year\r",
							"console.log (salary)\r",
							"pm.environment.set(\"u_salary_1_5_year\", salary);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"age\": 23,\r\n\"salary\": 800,\r\n\"name\": \"Ann\",\r\n\"auth_token\": \"{{token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "5)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 2) Проверка структуры json в ответе.\r",
							"var shema = {\r",
							"\t\"type\": \"object\",\r",
							"\t\"required\": [\r",
							"\t\t\"age\",\r",
							"\t\t\"family\",\r",
							"\t\t\"name\",\r",
							"\t\t\"salary\"\r",
							"\t],\r",
							"\t\"properties\": {\r",
							"\t\t\"age\": {\r",
							"\t\t\t\"type\": \"string\",\r",
							"\t\t},\r",
							"\t\t\"family\": {\r",
							"\t\t\t\"type\": \"object\",\r",
							"\t\t\t\"required\": [\r",
							"\t\t\t\t\"children\",\r",
							"\t\t\t\t\"u_salary_1_5_year\"\r",
							"\t\t\t],\r",
							"\t\t\t\"properties\": {\r",
							"\t\t\t\t\"children\": {\r",
							"\t\t\t\t\t\"type\": \"array\",\r",
							"\t\t\t\t\t\"items\":{\r",
							"\t\t\t\t\t\t\"type\": \"array\",\r",
							"\t\t\t\t\t}\r",
							"\t\t\t\t},\r",
							"\t\t\t\t\"u_salary_1_5_year\": {\r",
							"\t\t\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\t}\r",
							"\t\t\t}\r",
							"\t\t},\r",
							"\t\t\"name\": {\r",
							"\t\t\t\"type\": \"string\",\r",
							"\t\t},\r",
							"\t\t\"salary\": {\r",
							"\t\t\t\"type\": \"integer\",\r",
							"\t\t}\r",
							"\t}\r",
							"}\r",
							"pm.test('Shema is valid', function(){\r",
							"    pm.response.to.have.jsonSchema(shema)\r",
							"    })\r",
							"// 3) Проверить что занчение поля name = значению переменной name из окружения\r",
							"var respBody = pm.response.json();\r",
							"var req = request.data;\r",
							"var name_en =pm.environment.get(\"name\")\r",
							"console.log(name_en)\r",
							"pm.test(\"name_env to eql name\", function () {\r",
							"    pm.expect(respBody.name).to.eql(name_en);\r",
							"});\r",
							"// 4) Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
							"pm.test(\"age.req to eql age.req\", function () {\r",
							"    pm.expect(respBody.age).to.eql(req.age);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Vadim",
							"type": "default"
						},
						{
							"key": "age",
							"value": "23",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "{{u_salary_1_5_year}}",
							"type": "default"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/get_test_user",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "3)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// // 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 2) Проверка структуры json в ответе.\r",
							"var shema = { \"type\": \r",
							"\"object\",\r",
							"\t\"required\": [\r",
							"\t\t\"age\",\r",
							"\t\t\"name\",\r",
							"\t\t\"salary\"\r",
							"\t],\r",
							"\t\"properties\": {\r",
							"\t\t\"age\": {\r",
							"\t\t\t\"type\": \"integer\"\r",
							"\t\t},\r",
							"\t\t\"name\": {\r",
							"\t\t\t\"type\": \"string\"\r",
							"\t\t},\r",
							"\t\t\"salary\": {\r",
							"\t\t\t\"type\": \"array\",\r",
							"\t\t}\r",
							"\t}\r",
							"}\r",
							"pm.test('Shema is valid', function(){\r",
							"    pm.response.to.have.jsonSchema(shema)\r",
							"    })\r",
							"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"var respBody = pm.response.json();\r",
							"var req = request.data;\r",
							"pm.test(\"salary * 2\", function () {\r",
							"    pm.expect(respBody.salary[1]).to.eql+(req.salary*2);\r",
							"});\r",
							"pm.test(\"salary = respBody.salary[0]\", function () {\r",
							"    pm.expect(respBody.salary[0]).to.eql+(req.salary);\r",
							"});\r",
							"pm.test(\"salary * 3\", function () {\r",
							"    pm.expect(respBody.salary[2]).to.eql+(req.salary*3);\r",
							"});\r",
							"// 4) проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"\r",
							"var sall0 =parseInt (respBody.salary[0])\r",
							"var sall2 = parseInt (respBody.salary[2])\r",
							"var sall1 = parseInt (respBody.salary[1])\r",
							"pm.test(\"[2]>[0]\", function () {\r",
							"    pm.expect(sall2).to.be.above(sall0);\r",
							"});\r",
							"pm.test(\"[2]>[1]\", function () {\r",
							"    pm.expect(sall2).to.be.above(sall1);\r",
							"});\r",
							"console.log (sall1 + typeof(sall1))"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Ann",
							"type": "default"
						},
						{
							"key": "age",
							"value": "23",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "default"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/new_data",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "4)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"var shema = {\r",
							"\t\"type\": \"object\",\r",
							"\t\"required\": [\r",
							"\t\t\"age\",\r",
							"\t\t\"daily_food\",\r",
							"\t\t\"daily_sleep\",\r",
							"\t\t\"name\"\r",
							"\t],\r",
							"\t\"properties\": {\r",
							"\t\t\"age\": {\r",
							"\t\t\t\"type\": \"integer\",\r",
							"\t\t},\r",
							"\t\t\"daily_food\": {\r",
							"\t\t\t\"type\": \"number\",\r",
							"\t\t},\r",
							"\t\t\"daily_sleep\": {\r",
							"\t\t\t\"type\": \"integer\",\r",
							"\t\t},\r",
							"\t\t\"name\": {\r",
							"\t\t\t\"type\": \"string\",\r",
							"\t\t}\r",
							"\t}\r",
							"}\r",
							"pm.test('Shema is valid', function(){\r",
							"    pm.response.to.have.jsonSchema(shema)\r",
							"    })\r",
							"// 3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"var respBody = pm.response.json();\r",
							"var req = request.data;\r",
							"pm.test(\"daily_food to eql weight*0,012\", function () {\r",
							"    pm.expect(respBody.daily_food).to.eql+(req.weight*0,012);\r",
							"});\r",
							"pm.test(\"daily_sleep to eql weight*2.5\", function () {\r",
							"    pm.expect(respBody.daily_sleep).to.eql+(req. weight*2.5);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "1",
							"type": "default"
						},
						{
							"key": "name",
							"value": "Bobby",
							"type": "default"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "default"
						},
						{
							"key": "weight",
							"value": "2",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/test_pet_info",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "6)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Можете взять любой объект из присланного списка, используйте js random.\r",
							"var respBody = pm.response.json();\r",
							"var req = request.data;\r",
							"var item = respBody[Math.floor(Math.random() * respBody.length)];\r",
							"console.log(item)\r",
							"// В объекте возьмите Cur_ID и передать через окружение в следующий запрос.\r",
							"var cur_id = item.Cur_ID\r",
							"console.log(cur_id)\r",
							"pm.environment.set(\"curr_code\", cur_id)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/currency",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"currency"
					]
				}
			},
			"response": []
		}
	]
}